Heap: 主要看root值， 快速计算最大值/最小值
method: peek - O(1); poll -O(logN)  拿出root; offer -O(logN)
complete binary tree

Online vs Offline Algorithm
Online using Heap
是流数据，没有固定长度， 可以随时根据需求scalable

Offline using Sorting
是固定长度数据，每次scale后要重新计算


//**********************************
@215 Top K 
Kth largest element in an Array, not the kth distinct element
Method:
Sorting O(logN)
MaxHeap O(n+klogn): Heapify the array, then poll K times
MinHeap O(nlogK)

Using Min Heap
eg find the largest 4th
1. 前四个元素都加到heap里
2. 从第5个开始，如果比root(最小值)大，则代替root, reheap。 比root小，则pass
3. 直到最后，heap里剩下了4个最大的，且root是最小的，所以是largest 4th

(eg, find the smallest 4th, 则用Max Heap, 每次比root小，则加入，且删除root)

public int findKthLargest(int[] nums, int k) {
    PriorityQueue<Integer> heap = new PriorityQueue<>();  //这个PriorityQueue default is Min Heap,//
    for (int x : nums) {
       if (heap.size() < k || x >= heap.peek()) {  //如果x>heap.peek() 就变成找distinct 
           heap.offer(x);
        }
        if (heap.size() > k) {
            heap.poll();
         }
     return heap.peek();
 }
// Max Heap:
PriorityQueue<Integer> maxHeap
            = new PriorityQueue<Integer>(
                Collections.reverseOrder());

//******************************************
@23 Merge K sorted lists
Input: //lists = [[1,4,5],[1,3,4],[2,6]]
      ListNode array1 = new ListNode(1);
      ListNode a = new ListNode(4);
      ListNode a2 = new ListNode(5);
      array1.next = a;
      array1.next.next = a2;
      ListNode array2 = new ListNode(1);
      ListNode b = new ListNode(3);
      ListNode b2 = new ListNode(4);
      array2.next = b;
      array2.next.next=b2;
      ListNode array3 = new ListNode(2);
      ListNode c = new ListNode(6);
      array3.next = c;
      ListNode[] list = new ListNode[3]; // 
      list[0] = array1;
      list[1] = array2;
      list[2] = array3;
      
Output: // [1,1,2,3,4,4,5,6]

简化版: merge 2 sorted list O(m+n)
两个pointers

Merge K Sorted list
有k lists， 所以要K个pointers
Methods:
1. linear Scan O(k): 每次 把每个pointers 都扫一遍，找到最小的pointer, 然后此pointer++
2. Simple Sorting, 把pointer sort 一下，找最小
3. Min Heap O(logK) 

Using Min Heap
this heap only have k node which is the k pointer's value,
poll the root and the add the root's next pointer value to the heap

ListNode[]  ：  [ [ListNode1], [ListNode2], [ListNode3] ], 这个里面的listNode都是head, 一个单独的node

public ListNode mergeKLists(ListNode[] lists) {
    PriorityQueue<ListNode> heap = new PriorityQueue<>((a,b) -> a.val -b.val);      //(a,b) -> a.val -b.val 是一个comparator 如果是b-a则是max heap
    for (ListNode list : lists) {   
        if (list != null) {  
            heap.offer(list);       //这一步是把所有pointers 都加入到heap
        }
    }
    ListNode res = new ListNode(0), cur = res;     cur 是一个指针， res.next 是排好顺序的 linkednode list 的head
    while (!heap.isEmpty()) {
        ListNode top = heap.poll();      
        cur.next = top;
        cur = cur.next;
        if (top.next != null) {
            heap.offer(top.next);   
        }
    }
    return res.next;
 }
    

@more
347;253;295;767;703





























