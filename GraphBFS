Graph
 肯能是闭合的图
 没有固定入口


Graph representation
Adjacency Matrix, or Adjanceny List
 
 Adjanceny List: (List can be repalced by Set)
 * List<T>[n]  需要知道节点是多少
 * Map<T, List<T>>  好处是不知道有多少节点
 
 BFS：
 因为是水平展开所有nodes,所以舍和找最短路径（只适用于每条边的edige weight 都一样）
 会把每个edge都过一遍
 
 BFS 模版： Time complexity O(V+E)
 1. Initialize a queue with all starting points, a HashSet to record visited node;
 2. While queue is not empty
    a. Retrieve current queue size as number of nodes in the current level
    b. for each node in current level
        i. Poll out one node
       // ii. If this is the node we want, return it
        iii. Offer all its neighbor to the queue if not visited and valid (如左上角，不能选左边了)
    c. increase level

 tip:
 for 2D matrix， normally matrix[i][j]'s neightbors are 4, 
 so create a direction array {{0,1},{1,0},{0,-1},{-1,0}}  : {rwo, column}

 //******************************************8
 @542 : 01Matix
  Given a 01 matrix , find the distance of the nearest 0 for each cell.
  
  直接思维：对一每一个1，利用BFS找最近的0  O（mn*mn） 
  逆向思维： 对于所有的0，利用BFS 填充到每一个1的距离 Time O（mn） , Space O(mn)：如，所有0为第一层，然后1为下一层，或下下层
  
  int[][] dirs = {{0,1},{1,0},{0,-1},{-1,0}};
  public int[][] updateMatrix(int[][] matrix) {
      int m = matrix.length, n = matrix[0].length;
      int[][] rest = new int[m][n];
      boolen[][] visited = new boolean[m][n];
      Queue<int[]> queue = new LinkedList<>();
      for (int i  = 0; i < m; i++) {    // 这一步：所有0添加到queue
          for(int j = 0; j < n; j++) {
              if(matrix[i][j] == 0) {
                  queue.offer(new int[]{i,j});
                  visited[i][j] = true;
              }
          }
      }
  int cost = 0;
  while (!queue.isEmpty()) {
      int size = queue.size();
      for (int s = 0; s< size; s++) {
          int[] cur = queue.poll();
          int i = cur[0], j = cur[1];
          if (matrix[i][j] == 1) {
              res[i][j] = cost;
          }
          for (int[] dir : dirs) {
              int x = i + dir[0], y = j + dir[1];
              if (x >=0 && x < m && y>=0 && y<n && !visited[x][y] ) {
                  queue.offer(new int[]{x,y});
                  visited[x][y] = true;
              }
          }
      }
      cost++;
  }
  return res;
}
 

//*******************************************
@127  Word Ladder
除了input可以不再wordList, 其余必须都在wordList里

//先构建graph:
private Map<String, List<String>> constructGraph<List<String> wordList> {
    Map<String, List<String>> graph = new HahsMap<>();
    int n = wordList.size();
    for (int i = 0;  i < n - 1; i++) {
        for (int j = i + 1; j<n; j++) {
            String w1 = wordList.get(i), w2 = wordList.get(j);
            if (oneVhangeAway(w1, w2)) {  // 因为是无向图，所以双向连接   Time(n^2), space(n^2)
                graph.computeIfAbsent(w1, k -> new ArrayList<>()).add(w2);  // 如果没有w1,则创建key,with new aeeayList
                graph.computeIfAbsent(w2, k -> new ArrayList<>()).add(w1); 
            }
        }
    }
    return graph;
}

private boolean oneChangeAway(String w1, String w2) {
    int diff = 0; 
    for(int i = 0; i < w1.length(); i++) {
        char c1 = w1.charAt(i), c2 = w2.charAt(i);
        if (c1 != c2) {
            diff++;
        }
    }
    return diff == 1;
}

public int ladderLength(String beginWord, String endWord, List<String> wordList) {
    if (!wordList.contains(endWord)) 
        return 0;
    if(!worldList.contains(begianWord)) {
        wordList.add(beginWord);
    Map<String, List<String>> graph = construcGraph(wordList);
    Set<String> visited = new HashSet<>();
    Queue<String> queue = new LinkedList<>();
    visited.add(beginWord);
    queue.add(beginWord);
    
    int cost = 1;
    while (!queue.isWmpty()) {
        int size = queue.size();
        for (int 1 = 0; i < size; i++) {
            String cur = queue.poll;
            if (cur.equals(endWorld)) {
                 return cost;
             }
             for (String neighbor : graph.getOrDefault(cur, new ArrayList())) {
                 if (!visited.contains(neighbor)) {
                     visited.add(neighbor);
                     queue.offer(neighbor);
                 }
             }
         }
         cost++;
     }
     return 0;
 }
        
        
//**************************************************************
@more
934 310 1091 994 863 317
        
        
        
    
  
  
  
  
  
