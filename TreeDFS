BFS 是刨盒子，一层一层
DFS，递归形式

DFS 时间和BFS 差不多，但是对空间更友好，因为就是一条路搜到底 再返回， 但是BFS 层数越多，约占空间

DFS 模版
1. Base Case
? Recurse for subproblem
?  Do Somthing()
 
//?? 顺序是不固定的， 比如preorder: 打印-递归左-递归右； inorder: 递归左-打印-递归右； 。。。


TopDown VS BottomUp
Top Down DFS
1. 把值通过参数的形式从上往下传
2. 一般dfs()本身不返回值  

Bottom Up DFS (更难也更常见)
1. 把值从下（subproblem）网上传
2. 当前递归层利用subproblem 传上来的值计算当前层的新值并返回
3. 一定会有返回值

这里提到的 bottom up 的都是用的postorder遍历, 而top down则是preorder，请问这是一个普遍规律吗？

//**********
Bottom Up Step : 先recurse 在做计算
1. Base case
2. 向子问题要答案（return value）;// 要和5大返回答案物理意义一样
3. 利用子问题的答案构建当前问题（当前递归层）的答案  xx = recurse()
4. 如有必要，做一些额外操作
5. 返回答案 （给父问题）


找中间层来构建

//******************************************
@104: Max Depth of Binary Tree
Bottom Up Step   ： 比如中间层是 层3
1. Base case (node == null)
2. 向子问题要答案 ->  看层4返回的 max_depth
3. 利用子问题的答案构建当前问题（当前递归层）的答案  // 看给层2的什么答案： max(left_ans, right_ans) +1
4. 如有必要，做一些额外操作
5. 返回答案 （给父问题）

public int maxDepth(TreeNode root) {
    if (root == null) {
        return 0;
     }
     int left = maxDepth(root.left);
     int right = maxDepth(root.right);
     int max_depth = Math.max(left, right) + 1;
     return max_depth;
 }
 
//*********************************8
@121 Binary Tree Maximum Path Sum
任意一个path上所有数的和 ， 找最大的和

概述：
找到每个节点，以该节点为人字形的顶部，求 max/  max\ 和
来一个global max, 在dfs的时候随时更新




int max = Integer.MIN_VALUE;
public int maxPathSum(TreeNode root) {
    dfs(root);
    return max;
}

// 这个是当前node // 看下面
private int dfs(TreeNode node) {
    if (node == null) {
        return 0;
     }    
     int left = dfs(node.left);
     int right = dfs(node.right);
     left = left < 0 ? 0 : left;
     right = right < 0 ? 0 : right;
     max  = Math.max(max, left + right + node.val);  //因为这步需要家node.value
     return Math.max(left + node.val, right + node.val);
 }
 
 
// 以前例子没有分两个method的原因是dfs只需要right and left,但是这个例子还需要每个node.val

//***********************************************************************************

Top Down DFS Steps 先做计算再recurse
1. Base Case
2. 利用父问题传下来的值做计算
3. 如果有必要，做些额外操作
4. 把值传下去

//****
@129 :  Sum Root to leaf Numbers
把root 到leaf的值粘到一起(num*10+node.val)， 最有所有值相加 
但凡需要node.value都要两个method

int sum = 0;
public int sumNumsbers(TreeNode root) {
    if (root == null) 
        return 0;
    dfs(root, 0);
    return sums;
 
private void dfs(TreeNode root, int num) {
    num = num * 10 + root.val;
    if (root.left == null && root.right == null) {
        sum += num;
        return;
    }
    if (root.left != null) {
        dfs(root.left, num);
    }
    if (root.right != null) {
        dfs(root.right, num);
    }
}

//*************************

@more:
98, 110, 113, 236, 450, 508





















