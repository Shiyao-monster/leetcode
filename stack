stack
Last in First Out
适用于需要记录之前的状态，必要时可以回到之前的状态，或利用之前的值
不能用index,每次只能拿到top元素


compare to dynamic programming
DP: 记录之前素有状态，随时访问任何一个字问题，用array/ hashtable。 
     而且不会回到之前的状态，之后利用之前的值     
stack: 每次只需要top元素，并且每个状态只会用O(1)次，因为pop了就没了

***Principle
* 定义好stack的含义:
eg.
 在array[i]左侧所有比array[i]大的数
 递归之前的函数状态 (Call Stack)
 
 
 //***********************************************
 @739 Daily Temperatures
 Find the distance to next greater element for each array[i]
 
 方法1. 从逻辑上讲很简单的方法是 two pointers,一个指当前，另一个遍历其后，遇到比他大的就break
        就是慢：O(n^2)
 public static int[] dailyTemperatures(int[] temperatures) {
        int n = temperatures.length;
        int[] output = new int[n];
        int i,j;
        for (i = 0; i < n - 1; i++ ) {       
            for (j = i + 1; j < n;j++) {
                if (temperatures[j] > temperatures[i]) {
                    output[i] = j - i;
                    break;
                }
                output[i] = 0;                                
            }
        }
        output[n-1] = 0;
        return output;
    }

 

方法2； 用stack O(n)
 

 选择右边比当前大的，需要两个指针， 一个当前array,一个存它右边的且；比当前大 -> 这个时候就是要选择pop掉比它小的 ｜且要看后面的有没有比它大的，用callback-> 想到用stack
 

 从右往左存，pop的就是离当前最近的index;
 
 满足stack 从上到下 是：从小到大 的原因和方法：
 0 大1 小1小2 大2
 如果当前指针指的是大1，而stack 里存的是 小1小2 大2； 这是就要pop 小1小2，得到大2的index -大1的index,就是大1的output
 此时stack里是 大1，大2。 没不要存小1小2， 因为
 当前指针指0时，如果离它最近的数就比它大，就直接peek了，如果比它小，那么小1小2也必然比0小，直接pass,来到大2处来比较
 
 
 Stack Definition: All the element(index) to the right of array[i] that are greater than array[i]
 --> monotone increasing stack
 Top of stack: Next greater element to the right of array[i]

 
 import java.util.*;
 public int[] dailyTemperatures(int[] T) {
     int n = T.length;
     int[] res = new int[n];
     Deque<Integer> stack = new ArrayDeque<>();
     for (int i = n -1; i >= 0; i--) {
         while (!stack.isEmpty() && T[i] > T[stack.peek()])
             stack.pop();
         if (stack.isEmpty())
             res[i] = 0;
         else
             res[i] = stack.peek() - i;
         stack.push(i);
     }
     return res;
 }
 
 
 
 //*************************************
 @735: Asteroid Collision
 eg: asteroid = [5,10,-5]
      output = [5,10]
      
      方向相反，谁大谁赢
      
因为没看到后面的值，所以永远无法确定当前值是否活，并且也不确定前面的值是否活，
所以要用call back， by stack

stack 存所有当前过下来的

//自己写的  //然而有问题： 因为只有正负才会相撞， 负正不会相撞
 import java.util.*;
public static int[] asteroid(int[] T) {
      int n = T.length;
      Deque<Integer> stack = new ArrayDeque<>();
      for (int i = 0; i < n ; i++) {
         if (stack.isEmpty()) {
            stack.push(T[i]);
         } else {
            if((stack.peek() > 0 && T[i] > 0 ) ||
                 (stack.peek() < 0 && T[i] < 0)) {
               stack.push(T[i]);
            } else {
               while(!stack.isEmpty()){
                  if (stack.peek() > 0) {
                     if (stack.peek() + T[i] > 0) {
                        break;
                     } else if (stack.peek() + T[i] == 0) {
                        stack.pop();
                        break;
                     } else {
                        stack.pop();
                     }
                  } else {
                     if (stack.peek() + T[i] < 0) {
                        break;
                     } else if (stack.peek() + T[i] == 0) {
                        stack.pop();
                        break;
                     } else {
                        stack.pop();
                     }
                  }
               }
            }              
         }         
      }
      int l = stack.size();
      int[] output = new int[l];
      for(int j= l - 1;j >=0;j--) {
         output[j]=stack.pop();
      }   
      return output;
   }

//但其实老师的也差不多 // 但是我思考的还是不全面 // O(n), 即使有while,但是里面的stack 每次都是o(1)
   public int[] asteroidCollision(int[] asteroids) {
      Deque<Integer> stack = new ArrayDeque<>();
      for(int ast : asteroids) {
         if (ast > 0) {
            stack.push(ast);
         } else {
            while (!stack.isEmpty() && stack.peek()>0 && stack.peek() < -ast) {
               stack.pop();
            }
            if (stack.isEmpty() || stack.peek() < 0) {
               stack.push(ast);
               
            } else if (stack.peek() == -ast) {
               stack.pop();
            }                 
         }        
      }
      
   
      int[] output = new int[stack.size()];
      for(int j = output.length - 1; j >= 0; j--) {
         output[j]=stack.pop();
      }
   
      return output;
   }

                              
@more 
20;496;503;384;636;84
                  
















 
   


 
 
 
 
 
 
 
