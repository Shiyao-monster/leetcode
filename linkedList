array vs linked list

array: 内存里连续的数据
能用index访问 -> O(1) Access
能添加到最后   -> O(1) Add  ?? array扩容 amortized
删除需要挪动后面所有元素  -> O(n) Delete  // 中间array不能有空?  int[] default = 0; String[] : null; boolean[]: false

Linked list: 内存里不一定连续的数据， 如node 1 地址是 11， node 2 is 100
不能用index访问 -> O(n) Access
能添加到最后   -> O(n) Add  //双链表O(1)
删除需要找到元素  -> O(n) Delete


linked list 感觉就是插入，删除数据的时候方便，不用挪动后面的
method: Two pointers ; Recursion

//*************************
Two pointers
两个指针必须同向而行
1.一个前一个后，距离隔多少
2.两个指针的移动速度

eg1: linked list 找中间节点
快的每次走2节， 慢的走1
public ListNode linkedListMiddleNode(istNode head) {
    ListNode i = head;
    ListNode j = head;
    while (j != null && j.next != null) {  //因为j = j.next.next 必须要满足j != null && j.next != null // 用手算，无论奇偶都是可行的
        i = i.next;
        j = j.next.next;
    }
    return i;
}



eg2:linked list find the last k^th ,
j = i+k, j 出界，i 就是last k^th 
public ListNode linkedListLastKthNode(ListNode head, int k) {
    ListNode i = head, j = head;
    
    for (int c = 0; c < k; c++) {
        j= j.next;
    }
    while (j != null) {
        i = i.next;
        j = j.next;
    }
    return i;
}


//*****************************************
Bottom up recursion 3 steps:   借助recusion实现从后往起
1. 先问下一层要结果， 如 reverse_result = reverse();   // 1,3 含义必须相同
2.  reverse当前所在的ListNode  // 1->2->3->4  假设在3后的东西已经reverse 好了， 即 1->2->3->OK 当前我们需要把 3->OK >>> 3 <- OK. So, 3.next.next = 3; 3.next = null
3. Return reverse_result

eg1: Reverse the linked list
public ListNode reverse(ListNode head) {
    if (head == null || head.next = null) {
        return null;
    }
    ListNode reversed_head = reverse(head.next);
    head.next.next = head;
    head.next = null;
    return reversed_head;
}


*****************@more: 237; 141; 92; 25


Reverse the linked list use Iterator

 
	/**
	 * 遍历，将当前节点的下一个节点缓存后更改当前节点指针
	 */
	public Node reverse2(Node head) {
		if (head == null)
			return head;
		Node pre = null;
		Node cur = head
		Node tmp;
		while (cur != null) {
			tmp = cur.next; 
			cur.next(pre);   // 第一次cur是head, 我们要把head.next设为null
			pre = cur;
			cur = tmp;
		}		
		return pre;
	}












